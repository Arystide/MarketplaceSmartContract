/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ListingStruct = {
  price: BigNumberish;
  seller: string;
  amount: BigNumberish;
};

export type ListingStructOutput = [BigNumber, string, BigNumber] & {
  price: BigNumber;
  seller: string;
  amount: BigNumber;
};

export type ListingByTokenStruct = {
  tokenId: BigNumberish;
  listings: ListingStruct[];
};

export type ListingByTokenStructOutput = [BigNumber, ListingStructOutput[]] & {
  tokenId: BigNumber;
  listings: ListingStructOutput[];
};

export interface NFTTraderInterface extends utils.Interface {
  functions: {
    "GetListings(address)": FunctionFragment;
    "RemoveListing(address,uint256)": FunctionFragment;
    "addListing(uint256,address,uint256)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "listings(address,uint256,uint256)": FunctionFragment;
    "purchase(address,uint256,uint256,address)": FunctionFragment;
    "withdrawFunds(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "GetListings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "RemoveListing",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addListing",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "GetListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RemoveListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "listingAdded(tuple)": EventFragment;
    "listingRemoved(tuple)": EventFragment;
    "purchaseDone(address,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "listingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "listingRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "purchaseDone"): EventFragment;
}

export type listingAddedEvent = TypedEvent<
  [ListingStructOutput],
  { _listing: ListingStructOutput }
>;

export type listingAddedEventFilter = TypedEventFilter<listingAddedEvent>;

export type listingRemovedEvent = TypedEvent<
  [ListingStructOutput],
  { _listing: ListingStructOutput }
>;

export type listingRemovedEventFilter = TypedEventFilter<listingRemovedEvent>;

export type purchaseDoneEvent = TypedEvent<
  [string, string, ListingStructOutput],
  { seller: string; buyer: string; item: ListingStructOutput }
>;

export type purchaseDoneEventFilter = TypedEventFilter<purchaseDoneEvent>;

export interface NFTTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GetListings(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RemoveListing(
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addListing(
      price: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        price: BigNumber;
        seller: string;
        amount: BigNumber;
      }
    >;

    purchase(
      contractAddr: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      seller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      amount: BigNumberish,
      destAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  GetListings(
    contractAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RemoveListing(
    contractAddr: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addListing(
    price: BigNumberish,
    contractAddr: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  listings(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      price: BigNumber;
      seller: string;
      amount: BigNumber;
    }
  >;

  purchase(
    contractAddr: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    seller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    amount: BigNumberish,
    destAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    GetListings(
      contractAddr: string,
      overrides?: CallOverrides
    ): Promise<ListingByTokenStructOutput[]>;

    RemoveListing(
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addListing(
      price: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        price: BigNumber;
        seller: string;
        amount: BigNumber;
      }
    >;

    purchase(
      contractAddr: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      seller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      amount: BigNumberish,
      destAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "listingAdded(tuple)"(_listing?: null): listingAddedEventFilter;
    listingAdded(_listing?: null): listingAddedEventFilter;

    "listingRemoved(tuple)"(_listing?: null): listingRemovedEventFilter;
    listingRemoved(_listing?: null): listingRemovedEventFilter;

    "purchaseDone(address,address,tuple)"(
      seller?: null,
      buyer?: null,
      item?: null
    ): purchaseDoneEventFilter;
    purchaseDone(
      seller?: null,
      buyer?: null,
      item?: null
    ): purchaseDoneEventFilter;
  };

  estimateGas: {
    GetListings(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RemoveListing(
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addListing(
      price: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      contractAddr: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      seller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      amount: BigNumberish,
      destAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetListings(
      contractAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RemoveListing(
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addListing(
      price: BigNumberish,
      contractAddr: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listings(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      contractAddr: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      seller: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      amount: BigNumberish,
      destAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
